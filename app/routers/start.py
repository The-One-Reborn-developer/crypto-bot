from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.database.queues.get_user_by_id import get_user_by_id
from app.database.queues.get_user_by_registration_referral import get_user_by_registration_referral
from app.database.queues.post_user import post_user
from app.database.queues.put_user import put_user

from app.keyboards.start import start_keyboard
from app.keyboards.main import main_keyboard

from app.generators.registration_referral import registration_referral


class Registration(StatesGroup):
    start = State()
    contact = State()
    referral = State()


start_router = Router()


@start_router.message(CommandStart())
async def start_command(message: Message, state: FSMContext) -> None:
    await state.set_state(Registration.start)

    telegram_id = message.from_user.id
    try:
        user = await get_user_by_id(telegram_id)
    except Exception as e:
        print(f'Error getting user: {e}')

    if not user:
        try:
            await post_user(telegram_id)

            generated_registration_referral = await registration_referral()

            if telegram_id == 7167827272:
                await put_user(telegram_id, registration_referral_code=generated_registration_referral, is_admin=True)
            else:
                await put_user(telegram_id, registration_referral_code=generated_registration_referral)

            content = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bitcoin –∫—Ä–∞–Ω –æ—Ç Fire Taps.\n' \
              '–¢–æ–ª—å–∫–æ —Ç—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ üí∞ –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞—è —Å–≤–æ–∏!\n' \
              '–ó–æ–≤–∏ –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –µ—â—ë –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç ü§µ‚Äç‚ôÇÔ∏èü§µ\n\n' \
              '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É üëá'
            
            await state.set_state(Registration.contact)
            
            await message.answer(content, reply_markup=start_keyboard())
        except Exception as e:
            print(f'Error creating user: {e}')

            content = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòï'

            await message.answer(content)
    else:
        await state.clear()

        content = '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üôÇ'

        await message.answer(content, reply_markup=main_keyboard())
    


@start_router.message(Registration.contact)
async def contact_handler(message: Message, state: FSMContext) -> None:
    phone_number = message.contact.phone_number
    telegram_id = message.from_user.id

    try:
        await put_user(telegram_id, phone=phone_number)

        content = '–í–≤–µ–¥–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üîë'

        await message.delete()

        await message.answer(content)

        await state.set_state(Registration.referral)
    except Exception as e:
        print(f'Error updating user`s phone: {e}')

        content = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòï'

        await message.delete()

        await message.answer(content, reply_markup=start_keyboard())


@start_router.message(Registration.referral)
async def registration_referral_code_handler(message: Message, state: FSMContext) -> None:
    referral_code = message.text

    await message.delete()

    try:
        user_found = await get_user_by_registration_referral(referral_code)

        if user_found:
            content = '–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üôÇ'

            await message.answer(content, reply_markup=main_keyboard())

            await state.clear()
        else:
            content = '–¢–∞–∫–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòï'

            await message.answer(content, reply_markup=start_keyboard())
    except Exception as e:
        print(f'Error updating user`s phone: {e}')

        content = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòï'

        await message.delete()

        await message.answer(content, reply_markup=start_keyboard())