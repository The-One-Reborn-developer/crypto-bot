from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.database.queues.get_user_by_id import get_user_by_id
from app.database.queues.put_user import put_user

from app.bot.create_check import create_check
from app.bot.convert_btc_to_usdt import convert_btc_to_usdt

from app.keyboards.profile import profile_keyboard
from app.keyboards.main import main_keyboard


class Profile(StatesGroup):
    update_referral = State()
    withdraw = State()


profile_router = Router()


@profile_router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å üë§')
async def profile(message: Message, state: FSMContext) -> None:
    try:
        await state.clear()

        await message.delete()
        
        user = await get_user_by_id(message.from_user.id)
        
        btc_balance = '{:.8f}'.format(user[0])
        
        converted_balance = await convert_btc_to_usdt(float(btc_balance))
        usdt_equivalent = '{:.2f}'.format(converted_balance)
        
        referrals_amount = user[1]
        play_referral_code = user[7]
        if play_referral_code is None:
            play_referral_code = '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'

        if user:
            content = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}\n\n' \
                    f'BTC –ë–∞–ª–∞–Ω—Å: <code>{btc_balance}</code> ‚Çø\nUSDT —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: {usdt_equivalent} ‚ÇÆ\n\n' \
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_amount}\n\n' \
                    f'–ö–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏): <code>{user[2]}</code>\n\n' \
                    f'–ö–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–¥–ª—è –∏–≥—Ä—ã): <code>{user[7]}</code>'

            await message.answer(content, reply_markup=profile_keyboard(), parse_mode='HTML')
    except Exception as e:
        print(f'Profile error: {e}')


@profile_router.callback_query(F.data == 'update_referral')
async def update_referral(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        await state.set_state(Profile.update_referral)

        content = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ üîë'

        await callback.message.answer(content)
    except Exception as e:
        print(f'Update referral error: {e}')


@profile_router.message(Profile.update_referral)
async def update_referral_new(message: Message, state: FSMContext) -> None:
    try:
        await put_user(message.from_user.id, play_referral_code=message.text)

        await state.clear()

        content = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ'

        await message.answer(content, reply_markup=main_keyboard())
    except Exception as e:
        print(f'Update referral error: {e}')


@profile_router.callback_query(F.data == 'withdraw')
async def withdraw(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        await state.set_state(Profile.withdraw)

        content = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è –≤—ã–≤–æ–¥–∞.'

        await callback.message.answer(content)
    except Exception as e:
        print(f'Withdraw error: {e}')

    
@profile_router.message(Profile.withdraw)
async def withdraw_btc(message: Message, state: FSMContext) -> None:
    try:
        user = await get_user_by_id(message.from_user.id)
        btc_balance = user[0]

        if btc_balance < float(message.text):
            content = '–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üôÇ'

            await message.answer(content)
        else:
            check = await create_check(await convert_btc_to_usdt(float(message.text)))
            if check == 400:
                await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—É—é –∏–ª–∏ –±–æ–ª—å—à–µ 0.02 $ USD üòâ')

                return

            content = f'–ß–µ–∫ {check.check_id} –Ω–∞ —Å—É–º–º—É {'{:.8f}'.format(check.amount)} {check.asset} —Å–æ–∑–¥–∞–Ω –≤ {check.created_at} ‚úÖ\n' \
                    f'–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–µ: {check.bot_check_url}'
            
            await put_user(message.from_user.id, btc_balance=btc_balance - float(message.text))
            
            await message.answer(content, reply_markup=main_keyboard())

            await state.clear()
    except Exception as e:
        print(f'Withdraw BTC error: {e}')