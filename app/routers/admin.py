from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from cryptopay.types import Invoice

from app.database.queues.get_user_by_id import get_user_by_id
from app.bot.crypto_bot import crypto_bot
from app.bot.get_balance import get_balance

from app.generators.play_referral import play_referral

from app.keyboards.admin import admin_keyboard
from app.keyboards.main import main_keyboard


class Deposit(StatesGroup):
    amount = State()


admin_router = Router()


@admin_router.message(Command('admin'))
async def admin_panel(message: Message, state: FSMContext) -> None:
    try:
        user = await get_user_by_id(message.from_user.id)

        if user[5] is True:
            await message.delete()

            balance = await get_balance()
            formatted_balance = '{:.8f}'.format(balance)

            with open('app/temp/play_referral_code.txt', 'r') as f:
                play_referral_code = f.read()

            await state.clear()

            content = '–í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üîë\n' \
                      f'–ë–∞–ª–∞–Ω—Å BTC –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {formatted_balance} ‚Çø\n' \
                      f'–¢–µ–∫—É—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∏–≥—Ä—ã: <code>{play_referral_code}</code>'

            await message.answer(content, reply_markup=admin_keyboard(), parse_mode='HTML')
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚ùå')
    except Exception as e:
        print(f'Admin panel error: {e}')


@admin_router.message(F.text == '–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ üîô')
async def exit_admin_panel(message: Message, state: FSMContext) -> None:
    try:
        user = await get_user_by_id(message.from_user.id)

        if user[5] is True:
            await message.delete()

            await state.clear()

            await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚úÖ', reply_markup=main_keyboard())
        else:
            pass
    except Exception as e:
        print(f'Exit admin panel error: {e}')


@admin_router.message(F.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ. –∫–æ–¥ –¥–ª—è –∏–≥—Ä—ã üéÅ')
async def generate_referral_code(message: Message, state: FSMContext) -> None:
    try:
        user = await get_user_by_id(message.from_user.id)

        if user[5] is True:
            await message.delete()

            await play_referral()

            balance = await get_balance()
            formatted_balance = '{:.8f}'.format(balance)

            with open('app/temp/play_referral_code.txt', 'r') as f:
                play_referral_code = f.read()

            await state.clear()

            content = f'–ë–∞–ª–∞–Ω—Å BTC –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {formatted_balance} ‚Çø\n' \
                      f'–¢–µ–∫—É—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∏–≥—Ä—ã: <code>{play_referral_code}</code>'

            await message.answer(content, reply_markup=admin_keyboard(), parse_mode='HTML')
        else:
            pass
    except Exception as e:
        print(f'Generate referral code error: {e}')


@admin_router.message(F.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å BTC –∫–æ—à–µ–ª—ë–∫ ‚Çø')
async def deposit_btc(message: Message, state: FSMContext) -> None:
    try:
        user = await get_user_by_id(message.from_user.id)

        if user[5] is True:
            await message.delete()

            content = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.'

            await state.set_state(Deposit.amount)

            await message.answer(content)
        else:
            pass
    except Exception as e:
        print(f'Deposit BTC error: {e}')


@admin_router.message(Deposit.amount)
async def deposit_btc_amount(message: Message, state: FSMContext) -> None:
    try:
        user = await get_user_by_id(message.from_user.id)

        if user[5] is True:
            await message.delete()

            await state.update_data(amount=message.text)

            amount = await state.get_data()

            invoice = await crypto_bot.create_invoice(amount['amount'], 'BTC')

            await message.answer(f'–û–ø–ª–∞—Ç–∏—Ç–µ {amount["amount"]} BTC –ø–æ —Å—Å—ã–ª–∫–µ –≤ CryptoTestnetBot (—Ç–µ—Å—Ç–æ–≤—ã–π —Å—á—ë—Ç){invoice.mini_app_invoice_url}')

            invoice.await_payment(message=message, state=state)
        else:
            pass
    except Exception as e:
        print(f'Deposit BTC amount error: {e}')

        error_code = int(str(e).split(' ')[0].strip('[]'))
        if error_code == 400:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—É—é –∏–ª–∏ –±–æ–ª—å—à–µ 0.01 $ USD üòâ')


@crypto_bot.polling_handler()
async def handle_payment(invoice: Invoice, message: Message) -> None:
    await message.answer(f'–ü–ª–∞—Ç–µ–∂ {invoice.amount} {invoice.asset} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á—ë–Ω üôÇ')